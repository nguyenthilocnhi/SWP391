const mainCalendar = document.getElementById('mainCalendar');
const mainMonthYear = document.getElementById('mainMonthYear');
const moodIcons = document.querySelectorAll(".mood-icon");
const selectedMood = document.getElementById("selected-mood");
const symptomList = document.getElementById('symptom-list');
const saveSymptomsBtn = document.getElementById('saveSymptomsBtn');
const healthAlert = document.getElementById('healthAlert');
const alertMessage = document.getElementById('alertMessage');
const cycleWarning = document.getElementById('cycle-warning');
const reminderMessages = document.getElementById('reminderMessages');
const suggestionsList = document.getElementById('suggestionsList');
const symptomChartCanvas = document.getElementById('symptomChart');

let mainDate = new Date();
let periodData = JSON.parse(localStorage.getItem("periodData") || "[]");
let firstPredictionDate = localStorage.getItem("firstPeriodDateForPrediction") || null;

// === H·ªñ TR·ª¢ ƒê·ªäNH D·∫†NG NG√ÄY ===
function formatDate(d) {
    // Tr·∫£ v·ªÅ yyyy-mm-dd theo local time
    const year = d.getFullYear();
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const day = String(d.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}
function parseDate(str) {
    return new Date(str + "T00:00:00");
}
function getTodayStr() {
    return formatDate(new Date());
}

// === T√çNH TRUNG B√åNH CHU K·ª≤ ===
function getAverageCycle() {
    if (periodData.length < 2) return 28;
    const sorted = periodData.map(d => parseDate(d)).sort((a, b) => a - b);
    let total = 0;
    for (let i = 1; i < sorted.length; i++) {
        total += (sorted[i] - sorted[i - 1]) / (1000 * 3600 * 24);
    }
    return Math.round(total / (sorted.length - 1));
}

// === D·ª∞ ƒêO√ÅN K·ª≤ KINH ===
function predictNextPeriod(n = 1) {
    if (!firstPredictionDate) return null;
    const baseDate = parseDate(firstPredictionDate);
    const cycleLength = parseInt(localStorage.getItem("customCycleLength")) || getAverageCycle();
    baseDate.setDate(baseDate.getDate() + cycleLength * (n - 1));
    return baseDate;
}

// === HI·ªÇN TH·ªä L·ªäCH CH√çNH ===
function getDayType(date) {
    const iso = formatDate(date);
    const cycleLength = parseInt(localStorage.getItem("customCycleLength")) || 28;
    const periodLength = parseInt(localStorage.getItem("customPeriodLength")) || 5;
    if (periodData.includes(iso)) return "period";
    if (periodData.length === 0) return "";

    // L·∫•y ng√†y ƒë·∫ßu k·ª≥ kinh g·∫ßn nh·∫•t (chu·ªói li√™n ti·∫øp cu·ªëi c√πng)
    function getLastPeriodStart() {
        const ranges = getPeriodRanges();
        if (ranges.length === 0) return null;
        return ranges[ranges.length - 1].start;
    }
    const lastPeriodStart = getLastPeriodStart();
    if (!lastPeriodStart) return "";

    // D·ª± ƒëo√°n chu k·ª≥ ti·∫øp theo
    const nextPeriodStart = new Date(lastPeriodStart);
    nextPeriodStart.setDate(nextPeriodStart.getDate() + cycleLength);

    // Ng√†y r·ª•ng tr·ª©ng c·ªßa chu k·ª≥ ti·∫øp theo
    const ovulationDate = new Date(nextPeriodStart);
    ovulationDate.setDate(ovulationDate.getDate() - 14);

    // Giai ƒëo·∫°n d·ªÖ th·ª• thai: t·ª´ ovulationDate - 5 ƒë·∫øn ovulationDate + 1
    const fertileStart = new Date(ovulationDate);
    fertileStart.setDate(fertileStart.getDate() - 5);
    const fertileEnd = new Date(ovulationDate);
    fertileEnd.setDate(fertileEnd.getDate() + 1);

    // Ki·ªÉm tra c√°c giai ƒëo·∫°n d·ª± ƒëo√°n
    const diff = Math.floor((date - nextPeriodStart) / (1000 * 60 * 60 * 24));
    if (diff >= 0 && diff < periodLength) return "period-predict";

    if (formatDate(date) === formatDate(ovulationDate)) return "ovulation-predict";
    if (date >= fertileStart && date <= fertileEnd) return "fertile-predict";

    // Giai ƒëo·∫°n an to√†n: trong chu k·ª≥ d·ª± ƒëo√°n, kh√¥ng thu·ªôc c√°c giai ƒëo·∫°n tr√™n
    const diffFromNextStart = Math.floor((date - nextPeriodStart) / (1000 * 60 * 60 * 24));
    if (diffFromNextStart >= 0 && diffFromNextStart < cycleLength &&
        !(
            (diffFromNextStart >= 0 && diffFromNextStart < periodLength) ||
            (date >= fertileStart && date <= fertileEnd) ||
            formatDate(date) === formatDate(ovulationDate)
        )
    ) {
        return "safe-predict";
    }

    return "";
}

function renderCalendar(container, year, month, isPredict = false, offset = 1) {
    container.innerHTML = "";
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();

    // Header: Th·ª©
    const dayNames = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
    dayNames.forEach((dn, idx) => {
        const th = document.createElement('div');
        th.classList.add('day', 'readonly');
        th.textContent = dn;
        container.appendChild(th);
    });

    // T·∫°o √¥ tr·ªëng ƒë·∫ßu th√°ng
    const startWeekday = firstDay.getDay();
    for (let i = 0; i < startWeekday; i++) {
        const emptyDiv = document.createElement('div');
        emptyDiv.classList.add('day', 'readonly');
        container.appendChild(emptyDiv);
    }

    for (let d = 1; d <= daysInMonth; d++) {
        const date = new Date(year, month, d);
        const dayDiv = document.createElement('div');
        dayDiv.classList.add('day');
        dayDiv.textContent = d;

        // Th√™m class cho th·ª© B·∫£y v√† Ch·ªß Nh·∫≠t
        if (date.getDay() === 6) dayDiv.classList.add('saturday');
        if (date.getDay() === 0) dayDiv.classList.add('sunday');

        if (formatDate(date) === getTodayStr()) {
            dayDiv.classList.add('today');
            // Hi·ªÉn th·ªã icon t√¢m tr·∫°ng n·∫øu c√≥
            const mood = localStorage.getItem(`mood-${getTodayStr()}`);
            if (mood) {
                let emoji = '';
                if (mood === 'R·∫•t h·∫°nh ph√∫c') emoji = 'üòÑ';
                else if (mood === 'H·∫°nh ph√∫c') emoji = 'üòä';
                else if (mood === 'B√¨nh th∆∞·ªùng') emoji = 'üòê';
                else if (mood === 'Kh√¥ng vui') emoji = 'üòï';
                else if (mood === 'Phi·ªÅn mu·ªôn') emoji = 'üò¢';
                if (emoji) {
                    dayDiv.innerHTML = d + '<div style="font-size:1.2em;">' + emoji + '</div>';
                }
            }
        }

        // Ph√¢n lo·∫°i ng√†y th·ª±c t·∫ø
        const dayType = getDayType(date);
        switch (dayType) {
            case "period": dayDiv.classList.add("period"); break;
            case "fertile": dayDiv.classList.add("fertile"); break;
            case "ovulation": dayDiv.classList.add("ovulation"); break;
            case "safe": dayDiv.classList.add("safe"); break;
            case "period-predict": dayDiv.classList.add("period-predict"); break;
            case "fertile-predict": dayDiv.classList.add("fertile-predict"); break;
            case "ovulation-predict": dayDiv.classList.add("ovulation-predict"); break;
            case "safe-predict": dayDiv.classList.add("safe-predict"); break;
        }

        // N·∫øu l√† l·ªãch ch√≠nh, cho ph√©p click ƒë·ªÉ ch·ªçn ng√†y h√†nh kinh
        if (!isPredict) {
            dayDiv.style.cursor = 'pointer';
            dayDiv.addEventListener('click', function () {
                const iso = formatDate(date);
                let data = JSON.parse(localStorage.getItem("periodData") || "[]");
                if (data.includes(iso)) {
                    data = data.filter(d => d !== iso);
                } else {
                    data.push(iso);
                }
                localStorage.setItem("periodData", JSON.stringify(data));
                periodData = data;
                // C·∫≠p nh·∫≠t ng√†y ƒë·∫ßu ti√™n cho d·ª± ƒëo√°n n·∫øu c√≥ d·ªØ li·ªáu
                if (periodData.length > 0) {
                    const sorted = periodData.slice().sort();
                    firstPredictionDate = sorted[0];
                    localStorage.setItem("firstPeriodDateForPrediction", firstPredictionDate);
                } else {
                    firstPredictionDate = null;
                    localStorage.removeItem("firstPeriodDateForPrediction");
                }
                renderMainCalendar();
                updateCycleStats();
            });
        }

        container.appendChild(dayDiv);
    }
}

function renderMainCalendar() {
    const y = mainDate.getFullYear();
    const m = mainDate.getMonth();
    mainMonthYear.textContent = `${y} - Th√°ng ${m + 1}`;
    renderCalendar(mainCalendar, y, m);
}

function getPeriodRanges() {
    if (periodData.length === 0) return [];
    let sorted = periodData.map(d => parseDate(d)).sort((a, b) => a - b);
    let periods = [];
    let current = [];
    for (let i = 0; i < sorted.length; i++) {
        if (i === 0 || (sorted[i] - sorted[i - 1]) / (1000 * 60 * 60 * 24) === 1) {
            current.push(sorted[i]);
        } else {
            if (current.length > 0) periods.push(current);
            current = [sorted[i]];
        }
    }
    if (current.length > 0) periods.push(current);
    // Tr·∫£ v·ªÅ m·∫£ng c√°c k·ª≥: [{start: Date, end: Date}]
    return periods.map(p => ({ start: p[0], end: p[p.length - 1] }));
}

function getAveragePeriodLength() {
    const ranges = getPeriodRanges();
    if (ranges.length === 0) return 5;
    const lengths = ranges.map(r => Math.round((r.end - r.start) / (1000 * 60 * 60 * 24)) + 1);
    return Math.round(lengths.reduce((a, b) => a + b, 0) / lengths.length);
}

function getAverageCycleLength() {
    const ranges = getPeriodRanges();
    if (ranges.length < 2) return 28;
    let cycles = [];
    for (let i = 1; i < ranges.length; i++) {
        cycles.push((ranges[i].start - ranges[i - 1].start) / (1000 * 60 * 60 * 24));
    }
    return Math.round(cycles.reduce((a, b) => a + b, 0) / cycles.length);
}

function getFirstPeriodStart() {
    const ranges = getPeriodRanges();
    if (ranges.length === 0) return null;
    return formatDate(ranges[0].start);
}

// === C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU V√Ä SETTINGS ===
function applySettings() {
    const periodLengthInput = document.getElementById("period-length");
    const cycleLengthInput = document.getElementById("cycle-length");
    const periodLength = parseInt(periodLengthInput.value);
    const cycleLength = parseInt(cycleLengthInput.value);

    if (periodLength < 1 || periodLength > 15) {
        alert("ƒê·ªô d√†i k·ª≥ kinh ph·∫£i t·ª´ 1 ƒë·∫øn 15 ng√†y");
        return;
    }
    if (cycleLength < 20 || cycleLength > 45) {
        alert("ƒê·ªô d√†i chu k·ª≥ ph·∫£i t·ª´ 20 ƒë·∫øn 45 ng√†y");
        return;
    }

    localStorage.setItem("customPeriodLength", periodLength);
    localStorage.setItem("customCycleLength", cycleLength);
    alert("C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");

    // C·∫≠p nh·∫≠t l·∫°i l·ªãch d·ª± ƒëo√°n
    renderMainCalendar();
}

// === L∆ØU V√Ä HI·ªÇN TH·ªä T√ÇM TR·∫†NG ===
function saveMood(mood) {
    const today = getTodayStr();
    localStorage.setItem(`mood-${today}`, mood);
    selectedMood.textContent = mood;
    moodIcons.forEach(icon => icon.classList.remove("selected"));
    // ƒë√°nh d·∫•u l·∫°i icon
    moodIcons.forEach(icon => {
        if (icon.dataset.mood === mood) icon.classList.add("selected");
    });
    renderMainCalendar(); // c·∫≠p nh·∫≠t l·∫°i l·ªãch ƒë·ªÉ hi·ªÉn th·ªã icon t√¢m tr·∫°ng
}

function loadMood() {
    const today = getTodayStr();
    const savedMood = localStorage.getItem(`mood-${today}`) || "Ch∆∞a ch·ªçn";
    selectedMood.textContent = savedMood;
    moodIcons.forEach(icon => {
        icon.classList.remove("selected");
        if (icon.dataset.mood === savedMood) icon.classList.add("selected");
    });
}

moodIcons.forEach(icon => {
    icon.addEventListener("click", () => {
        const mood = icon.dataset.mood;
        const today = getTodayStr();
        const currentMood = localStorage.getItem(`mood-${today}`);
        if (currentMood === mood) {
            // N·∫øu ƒë√£ ch·ªçn r·ªìi th√¨ b·ªè ch·ªçn
            localStorage.removeItem(`mood-${today}`);
            selectedMood.textContent = "Ch∆∞a ch·ªçn";
            moodIcons.forEach(ic => ic.classList.remove("selected"));
            renderMainCalendar();
            updateReminders();
            updateSuggestions();
        } else {
            saveMood(mood);
            updateReminders();
            updateSuggestions();
        }
    });
});

// === TRI·ªÜU CH·ª®NG V√Ä C·∫¢NH B√ÅO ===
saveSymptomsBtn.addEventListener('click', () => {
    const checkedSymptoms = Array.from(symptomList.querySelectorAll('input[type="checkbox"]:checked'))
        .map(cb => cb.value);

    // Cho ph√©p kh√¥ng ch·ªçn tri·ªáu ch·ª©ng n√†o
    if (checkedSymptoms.length === 0) {
        // N·∫øu kh√¥ng ch·ªçn tri·ªáu ch·ª©ng n√†o, x√≥a d·ªØ li·ªáu tri·ªáu ch·ª©ng ng√†y ƒë√≥
        localStorage.removeItem(`symptoms-${getTodayStr()}`);
        healthAlert.style.display = "none";
        alertMessage.textContent = "";
        updateSymptomStats();
        updateReminders();
        updateSuggestions();
        return;
    }

    localStorage.setItem(`symptoms-${getTodayStr()}`, JSON.stringify(checkedSymptoms));
    checkHealthAlert(checkedSymptoms);
    updateSymptomStats();
    updateReminders();
    updateSuggestions();
});

// C·∫£nh b√°o tri·ªáu ch·ª©ng nghi√™m tr·ªçng
function checkHealthAlert(symptoms) {
    const dangerSymptoms = [
        "ƒêau b·ª•ng d·ªØ d·ªôi",
        "Ch·∫£y m√°u b·∫•t th∆∞·ªùng",
        "S·ªët, m·ªát m·ªèi"
    ];

    const foundDanger = symptoms.some(s => dangerSymptoms.includes(s));

    if (foundDanger) {
        alertMessage.textContent = "‚ö†Ô∏è B·∫°n c√≥ tri·ªáu ch·ª©ng c·∫£nh b√°o s·ª©c kh·ªèe ph·ª• khoa nghi√™m tr·ªçng. Vui l√≤ng li√™n h·ªá b√°c sƒ© ho·∫∑c ƒë·∫øn c∆° s·ªü y t·∫ø ƒë·ªÉ ki·ªÉm tra ngay!";
        healthAlert.style.display = "block";
    } else {
        alertMessage.textContent = "";
        healthAlert.style.display = "none";
    }
}

// Khi t·∫£i trang, load tri·ªáu ch·ª©ng h√¥m nay n·∫øu c√≥
function loadTodaySymptoms() {
    const savedSymptoms = JSON.parse(localStorage.getItem(`symptoms-${getTodayStr()}`) || "[]");
    if (savedSymptoms.length > 0) {
        checkHealthAlert(savedSymptoms);
        symptomList.querySelectorAll('input[type="checkbox"]').forEach(cb => {
            cb.checked = savedSymptoms.includes(cb.value);
        });
    }
}

// === TH·ªêNG K√ä CHU K·ª≤ ===
const cycleChartCtx = document.getElementById('cycleChart').getContext('2d');
let cycleChart;

function updateCycleStats() {
    if (periodData.length < 2) {
        cycleWarning.textContent = "D·ªØ li·ªáu chu k·ª≥ ch∆∞a ƒë·ªß ƒë·ªÉ th·ªëng k√™.";
        if (cycleChart) cycleChart.destroy();
        return;
    }

    cycleWarning.textContent = "";
    const sorted = periodData.map(d => parseDate(d)).sort((a, b) => a - b);
    const cycleLengths = [];
    for (let i = 1; i < sorted.length; i++) {
        cycleLengths.push(Math.round((sorted[i] - sorted[i - 1]) / (1000 * 60 * 60 * 24)));
    }

    const labels = sorted.slice(1).map(d => formatDate(d));
    if (cycleChart) cycleChart.destroy();
    cycleChart = new Chart(cycleChartCtx, {
        type: 'line',
        data: {
            labels,
            datasets: [{
                label: 'ƒê·ªô d√†i chu k·ª≥ (ng√†y)',
                data: cycleLengths,
                borderColor: '#10b981',
                backgroundColor: 'rgba(16,185,129,0.2)',
                fill: true,
                tension: 0.3,
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    suggestedMin: 20,
                    suggestedMax: 45,
                    stepSize: 1,
                    ticks: {
                        precision: 0
                    }
                }
            }
        }
    });
}

// === TH·ªêNG K√ä TRI·ªÜU CH·ª®NG ===
let symptomChart;

function updateSymptomStats() {
    // L·∫•y d·ªØ li·ªáu tri·ªáu ch·ª©ng theo th√°ng hi·ªán t·∫°i
    const today = new Date();
    const currentMonth = today.getMonth();
    const currentYear = today.getFullYear();

    // ƒê·∫øm s·ªë ng√†y m·ªói tri·ªáu ch·ª©ng xu·∫•t hi·ªán trong th√°ng (danh s√°ch m·ªõi)
    const symptomCountMap = {
        // Nh√≥m 1: Th·ªÉ ch·∫•t
        "ƒêau b·ª•ng d∆∞·ªõi": 0,
        "ƒêau l∆∞ng": 0,
        "ƒêau ƒë·∫ßu ho·∫∑c ƒëau n·ª≠a ƒë·∫ßu": 0,
        "M·ªát m·ªèi": 0,
        "Ch√≥ng m·∫∑t": 0,
        "ƒêau ng·ª±c ho·∫∑c ng·ª±c cƒÉng t·ª©c": 0,
        "Bu·ªìn n√¥n": 0,
        "Kh√≥ ng·ªß": 0,
        "ƒêau c∆° nh·∫π": 0,
        // Nh√≥m 3: Da & c∆° th·ªÉ
        "M·ª•n n·ªïi nhi·ªÅu": 0,
        "CƒÉng ng·ª±c": 0,
        "TƒÉng c√¢n nh·∫π (do gi·ªØ n∆∞·ªõc)": 0,
        "Ph√π nh·∫π (m·∫∑t, tay ch√¢n)": 0,
        // Nh√≥m 4: Ti√™u h√≥a & ƒÉn u·ªëng
        "ƒê·∫ßy b·ª•ng, ch∆∞·ªõng b·ª•ng": 0,
        "T√°o b√≥n": 0,
        "Ti√™u ch·∫£y": 0,
        "Th√®m ƒÉn (ƒë·∫∑c bi·ªát ƒë·ªì ng·ªçt, m·∫∑n)": 0,
        "Ch√°n ƒÉn": 0,
        // Nh√≥m 5: R·ª•ng tr·ª©ng ƒë·∫∑c tr∆∞ng
        "ƒêau b·ª•ng nh·∫π m·ªôt b√™n": 0,
        "TƒÉng ti·∫øt d·ªãch √¢m ƒë·∫°o": 0,
        "C·∫£m gi√°c ƒë·∫ßy b·ª•ng nh·∫π": 0
    };

    // Duy·ªát t·ª´ng ng√†y trong th√°ng
    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
    for (let d = 1; d <= daysInMonth; d++) {
        const dayStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(d).padStart(2, '0')}`;
        const symptoms = JSON.parse(localStorage.getItem(`symptoms-${dayStr}`) || "[]");
        symptoms.forEach(s => {
            if (symptomCountMap[s] !== undefined) symptomCountMap[s]++;
        });
    }

    const labels = Object.keys(symptomCountMap);
    const data = Object.values(symptomCountMap);

    const ctx = symptomChartCanvas.getContext('2d');
    if (symptomChart) symptomChart.destroy();

    symptomChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels,
            datasets: [{
                label: 'S·ªë ng√†y tri·ªáu ch·ª©ng xu·∫•t hi·ªán trong th√°ng',
                data,
                backgroundColor: '#10b981',
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    stepSize: 1,
                    ticks: { precision: 0 }
                }
            },
            responsive: true,
        }
    });
}

// === NH·∫ÆC NH·ªû C√Å NH√ÇN H√ìA ===
function updateReminders() {
    reminderMessages.innerHTML = "";
    const today = getTodayStr();
    const cycleLength = parseInt(localStorage.getItem("customCycleLength")) || getAverageCycle();
    const periodLength = parseInt(localStorage.getItem("customPeriodLength")) || 5;

    // T√≠nh ng√†y t·ª´ k·ª≥ kinh g·∫ßn nh·∫•t
    if (!periodData.length) {
        reminderMessages.textContent = "B·∫°n ch∆∞a nh·∫≠p d·ªØ li·ªáu k·ª≥ kinh n√†o, vui l√≤ng c·∫≠p nh·∫≠t ƒë·ªÉ nh·∫≠n nh·∫Øc nh·ªü ch√≠nh x√°c.";
        return;
    }
    const sortedPeriods = periodData.map(d => parseDate(d)).sort((a, b) => a - b);
    let lastPeriod = null;
    for (let i = sortedPeriods.length - 1; i >= 0; i--) {
        if (sortedPeriods[i] <= new Date()) {
            lastPeriod = sortedPeriods[i];
            break;
        }
    }
    if (!lastPeriod) {
        reminderMessages.textContent = "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu k·ª≥ kinh ph√π h·ª£p ƒë·ªÉ nh·∫Øc nh·ªü.";
        return;
    }

    const todayDate = new Date();
    const daysSinceLastPeriod = Math.floor((todayDate - lastPeriod) / (1000 * 60 * 60 * 24));

    let messages = [];

    // Nh·∫Øc ng√†y h√†nh kinh
    if (daysSinceLastPeriod >= 0 && daysSinceLastPeriod < periodLength) {
        messages.push("B·∫°n ƒëang trong k·ª≥ h√†nh kinh. H√£y chƒÉm s√≥c s·ª©c kh·ªèe v√† ngh·ªâ ng∆°i h·ª£p l√Ω.");
    }
    // Nh·∫Øc ng√†y d·ªÖ th·ª• thai
    if (daysSinceLastPeriod >= 12 && daysSinceLastPeriod <= 16) {
        messages.push("B·∫°n ƒëang trong giai ƒëo·∫°n d·ªÖ th·ª• thai. H√£y l∆∞u √Ω n·∫øu b·∫°n c√≥ k·∫ø ho·∫°ch ho·∫∑c tr√°nh thai.");
    }
    // Nh·∫Øc v·ªÅ tri·ªáu ch·ª©ng nguy hi·ªÉm
    const symptomsToday = JSON.parse(localStorage.getItem(`symptoms-${today}`) || "[]");
    const dangerSymptoms = ["ƒêau b·ª•ng d·ªØ d·ªôi", "Ch·∫£y m√°u b·∫•t th∆∞·ªùng", "S·ªët, m·ªát m·ªèi"];
    const hasDangerSymptom = symptomsToday.some(s => dangerSymptoms.includes(s));
    if (hasDangerSymptom) {
        messages.push("‚ö†Ô∏è B·∫°n c√≥ tri·ªáu ch·ª©ng c·∫ßn ƒë∆∞·ª£c ch√∫ √Ω. Vui l√≤ng li√™n h·ªá b√°c sƒ© khi c·∫ßn.");
    }

    // Th√¥ng ƒëi·ªáp theo t√¢m tr·∫°ng
    const moodMessages = {
        "R·∫•t h·∫°nh ph√∫c": "B·∫°n ƒëang r·∫•t vui v·∫ª! H√£y lan t·ªèa nƒÉng l∆∞·ª£ng t√≠ch c·ª±c n√†y ƒë·∫øn m·ªçi ng∆∞·ªùi xung quanh nh√©.",
        "H·∫°nh ph√∫c": "M·ªôt ng√†y tuy·ªát v·ªùi! H√£y t·∫≠n h∆∞·ªüng v√† l√†m ƒëi·ªÅu b·∫°n y√™u th√≠ch.",
        "B√¨nh th∆∞·ªùng": "N·∫øu c√≥ ƒëi·ªÅu g√¨ khi·∫øn b·∫°n ch∆∞a vui, h√£y th·ª≠ th∆∞ gi√£n ho·∫∑c chia s·∫ª v·ªõi b·∫°n b√®.",
        "Kh√¥ng vui": "B·∫°n ƒëang kh√¥ng vui. H√£y d√†nh th·ªùi gian cho b·∫£n th√¢n, ngh·ªâ ng∆°i ho·∫∑c t√¢m s·ª± v·ªõi ng∆∞·ªùi th√¢n.",
        "Phi·ªÅn mu·ªôn": "B·∫°n ƒëang c·∫£m th·∫•y phi·ªÅn mu·ªôn. ƒê·ª´ng ng·∫ßn ng·∫°i t√¨m ki·∫øm s·ª± h·ªó tr·ª£ t·ª´ ng∆∞·ªùi th√¢n ho·∫∑c chuy√™n gia."
    };
    const mood = localStorage.getItem(`mood-${today}`);
    if (mood && moodMessages[mood]) {
        messages.push(moodMessages[mood]);
    }

    if (messages.length === 0) {
        messages.push("Ch√∫c b·∫°n m·ªôt ng√†y kh·ªèe m·∫°nh v√† vui v·∫ª!");
    }

    reminderMessages.innerHTML = messages.map(m => `<p>‚Ä¢ ${m}</p>`).join("");
}

// === G·ª¢I √ù S·∫¢N PH·∫®M & DINH D∆Ø·ª†NG ===
function updateSuggestions() {
    suggestionsList.innerHTML = "";
    const today = getTodayStr();
    const mood = localStorage.getItem(`mood-${today}`);
    const symptoms = JSON.parse(localStorage.getItem(`symptoms-${today}`) || "[]");

    let suggestions = [];

    // G·ª£i √Ω theo tri·ªáu ch·ª©ng
    if (symptoms.includes("ƒêau b·ª•ng d·ªØ d·ªôi")) {
        suggestions.push("S·∫£n ph·∫©m g·ª£i √Ω: Thu·ªëc gi·∫£m ƒëau, t√∫i ch∆∞·ªùm ·∫•m.");
        suggestions.push("Dinh d∆∞·ª°ng: ƒÇn nh·∫π, u·ªëng nhi·ªÅu n∆∞·ªõc, tr√°nh ƒë·ªì cay n√≥ng.");
    }
    if (symptoms.includes("S·ªët, m·ªát m·ªèi")) {
        suggestions.push("S·∫£n ph·∫©m g·ª£i √Ω: Vitamin t·ªïng h·ª£p, n∆∞·ªõc ƒëi·ªán gi·∫£i.");
        suggestions.push("Dinh d∆∞·ª°ng: ƒÇn nhi·ªÅu rau xanh, tr√°i c√¢y, ngh·ªâ ng∆°i nhi·ªÅu.");
    }
    if (symptoms.includes("Kh√≠ h∆∞ b·∫•t th∆∞·ªùng") || symptoms.includes("Ng·ª©a v√πng k√≠n")) {
        suggestions.push("S·∫£n ph·∫©m g·ª£i √Ω: Dung d·ªãch v·ªá sinh d·ªãu nh·∫π, qu·∫ßn l√≥t cotton.");
        suggestions.push("Dinh d∆∞·ª°ng: U·ªëng nhi·ªÅu n∆∞·ªõc, b·ªï sung probiotic.");
    }

    // G·ª£i √Ω theo mood
    if (mood === "Kh√¥ng vui" || mood === "Phi·ªÅn mu·ªôn") {
        suggestions.push("S·∫£n ph·∫©m g·ª£i √Ω: Tr√† th·∫£o d∆∞·ª£c th∆∞ gi√£n, tinh d·∫ßu th∆°m.");
        suggestions.push("Dinh d∆∞·ª°ng: S√¥-c√¥-la ƒëen, c√°c lo·∫°i h·∫°t, tr√°i c√¢y t∆∞∆°i.");
    }
    if (mood === "R·∫•t h·∫°nh ph√∫c" || mood === "H·∫°nh ph√∫c") {
        suggestions.push("H√£y duy tr√¨ ch·∫ø ƒë·ªô ƒÉn c√¢n b·∫±ng v√† v·∫≠n ƒë·ªông nh·∫π nh√†ng ƒë·ªÉ gi·ªØ v·ªØng nƒÉng l∆∞·ª£ng t√≠ch c·ª±c!");
    }

    // N·∫øu kh√¥ng c√≥ tri·ªáu ch·ª©ng/mood ƒë·∫∑c bi·ªát, g·ª£i √Ω chung
    if (suggestions.length === 0) {
        suggestions.push("S·∫£n ph·∫©m g·ª£i √Ω: Th·ª±c ph·∫©m b·ªï sung c√¢n b·∫±ng dinh d∆∞·ª°ng.");
        suggestions.push("Dinh d∆∞·ª°ng n√™n ∆∞u ti√™n: Ch·∫ø ƒë·ªô ƒÉn ƒëa d·∫°ng, nhi·ªÅu rau c·ªß qu·∫£.");
    }

    suggestionsList.innerHTML = suggestions.map(s => `<li>${s}</li>`).join("");
}

// === GHI NH·∫¨N & QU·∫¢N L√ù K·ª≤ KINH NGUY·ªÜT ===
const periodForm = document.getElementById('periodForm');
const periodStartInput = document.getElementById('periodStart');
const periodEndInput = document.getElementById('periodEnd');
const historyBody = document.getElementById('historyBody');

function loadPeriodHistory() {
    const periods = JSON.parse(localStorage.getItem('periodHistory') || '[]');
    historyBody.innerHTML = '';
    periods.forEach(period => {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${period.start}</td><td>${period.end}</td><td>${period.days}</td>`;
        historyBody.appendChild(tr);
    });
}

if (periodForm) {
    periodForm.addEventListener('submit', function (e) {
        e.preventDefault();
        const start = periodStartInput.value;
        const end = periodEndInput.value;
        if (!start || !end) {
            alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c!');
            return;
        }
        if (end < start) {
            alert('Ng√†y k·∫øt th√∫c ph·∫£i sau ho·∫∑c b·∫±ng ng√†y b·∫Øt ƒë·∫ßu!');
            return;
        }
        const days = (new Date(end) - new Date(start)) / (1000 * 60 * 60 * 24) + 1;
        const periods = JSON.parse(localStorage.getItem('periodHistory') || '[]');
        periods.push({ start, end, days });
        localStorage.setItem('periodHistory', JSON.stringify(periods));
        loadPeriodHistory();
        periodForm.reset();
    });
    loadPeriodHistory();
}

// === T·ª∞ ƒê·ªòNG REFRESH L·ªäCH KHI SANG NG√ÄY M·ªöI ===
let lastTodayStr = getTodayStr();
setInterval(() => {
    const nowTodayStr = getTodayStr();
    if (nowTodayStr !== lastTodayStr) {
        lastTodayStr = nowTodayStr;
        renderMainCalendar();
    }
}, 60 * 1000); // ki·ªÉm tra m·ªói ph√∫t

// === KH·ªûI ƒê·ªòNG ===
document.addEventListener('DOMContentLoaded', () => {
    // Kh·ªüi t·∫°o d·ªØ li·ªáu chu k·ª≥ (demo)
    if (!firstPredictionDate && periodData.length) {
        localStorage.setItem("firstPeriodDateForPrediction", periodData[0]);
        firstPredictionDate = periodData[0];
    }

    renderMainCalendar();

    // C√†i ƒë·∫∑t n√∫t chuy·ªÉn th√°ng
    document.getElementById('prevMainMonth').onclick = () => {
        mainDate.setMonth(mainDate.getMonth() - 1);
        renderMainCalendar();
    };
    document.getElementById('nextMainMonth').onclick = () => {
        mainDate.setMonth(mainDate.getMonth() + 1);
        renderMainCalendar();
    };

    // C√†i ƒë·∫∑t n√∫t l∆∞u c√†i ƒë·∫∑t chu k·ª≥
    document.getElementById('apply-settings').onclick = applySettings;

    // Load t√¢m tr·∫°ng h√¥m nay
    loadMood();

    // Load tri·ªáu ch·ª©ng h√¥m nay
    loadTodaySymptoms();

    // C·∫≠p nh·∫≠t th·ªëng k√™
    updateCycleStats();
    updateSymptomStats();

    // C·∫≠p nh·∫≠t nh·∫Øc nh·ªü v√† g·ª£i √Ω
    updateReminders();
    updateSuggestions();
});
