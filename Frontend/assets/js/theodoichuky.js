const mainCalendar = document.getElementById('mainCalendar');
const mainMonthYear = document.getElementById('mainMonthYear');
const moodIcons = document.querySelectorAll(".mood-icon");
const selectedMood = document.getElementById("selected-mood");
const cycleWarning = document.getElementById('cycle-warning');
const reminderMessages = document.getElementById('reminderMessages');

let mainDate = new Date();
let periodData = JSON.parse(localStorage.getItem("periodData") || "[]");

// === H·ªñ TR·ª¢ ƒê·ªäNH D·∫†NG NG√ÄY ===
function formatDate(d) {
    const year = d.getFullYear();
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const day = String(d.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

function parseDate(str) {
    return new Date(str + "T00:00:00");
}

function getTodayStr() {
    return formatDate(new Date());
}

// === T√çNH TRUNG B√åNH CHU K·ª≤ ===
function getAverageCycle() {
    if (periodData.length < 2) return 28;
    const sorted = periodData.map(d => parseDate(d)).sort((a, b) => a - b);
    let total = 0;
    for (let i = 1; i < sorted.length; i++) {
        total += (sorted[i] - sorted[i - 1]) / (1000 * 3600 * 24);
    }
    return Math.round(total / (sorted.length - 1));
}

// === HI·ªÇN TH·ªä L·ªäCH CH√çNH ===
function getDayType(date) {
    const iso = formatDate(date);
    const cycleLength = parseInt(localStorage.getItem("customCycleLength")) || 28;
    const periodLength = parseInt(localStorage.getItem("customPeriodLength")) || 5;
    if (periodData.includes(iso)) return "period";
    
    // Ch·ªâ d·ª± ƒëo√°n khi c√≥ d·ªØ li·ªáu k·ª≥ kinh th·ª±c t·∫ø
    if (periodData.length === 0) return "";

    // L·∫•y ng√†y ƒë·∫ßu k·ª≥ kinh g·∫ßn nh·∫•t
    const ranges = getPeriodRanges();
    if (ranges.length === 0) return "";
    
    const lastPeriodStart = ranges[ranges.length - 1].start;

    // D·ª± ƒëo√°n 3 chu k·ª≥ ti·∫øp theo
    const nextPeriodStart1 = new Date(lastPeriodStart);
    nextPeriodStart1.setDate(nextPeriodStart1.getDate() + cycleLength);
    
    const nextPeriodStart2 = new Date(lastPeriodStart);
    nextPeriodStart2.setDate(nextPeriodStart2.getDate() + cycleLength * 2);
    
    const nextPeriodStart3 = new Date(lastPeriodStart);
    nextPeriodStart3.setDate(nextPeriodStart3.getDate() + cycleLength * 3);

    // Ki·ªÉm tra ng√†y hi·ªán t·∫°i c√≥ thu·ªôc 1 trong 3 chu k·ª≥ d·ª± ƒëo√°n kh√¥ng
    let currentPeriodStart = null;
    
    if (date >= nextPeriodStart1 && date < new Date(nextPeriodStart1.getTime() + cycleLength * 24 * 60 * 60 * 1000)) {
        currentPeriodStart = nextPeriodStart1;
    } else if (date >= nextPeriodStart2 && date < new Date(nextPeriodStart2.getTime() + cycleLength * 24 * 60 * 60 * 1000)) {
        currentPeriodStart = nextPeriodStart2;
    } else if (date >= nextPeriodStart3 && date < new Date(nextPeriodStart3.getTime() + cycleLength * 24 * 60 * 60 * 1000)) {
        currentPeriodStart = nextPeriodStart3;
    }
    
    if (!currentPeriodStart) return "";

    // Ng√†y r·ª•ng tr·ª©ng c·ªßa chu k·ª≥ hi·ªán t·∫°i
    const ovulationDate = new Date(currentPeriodStart);
    ovulationDate.setDate(ovulationDate.getDate() - 14);

    // Giai ƒëo·∫°n d·ªÖ th·ª• thai: t·ª´ ovulationDate - 5 ƒë·∫øn ovulationDate + 1
    const fertileStart = new Date(ovulationDate);
    fertileStart.setDate(fertileStart.getDate() - 5);
    const fertileEnd = new Date(ovulationDate);
    fertileEnd.setDate(fertileEnd.getDate() + 1);

    // Ki·ªÉm tra c√°c giai ƒëo·∫°n d·ª± ƒëo√°n
    const diff = Math.floor((date - currentPeriodStart) / (1000 * 60 * 60 * 24));
    if (diff >= 0 && diff < periodLength) return "period-predict";

    if (formatDate(date) === formatDate(ovulationDate)) return "ovulation-predict";
    if (date >= fertileStart && date <= fertileEnd) return "fertile-predict";

    // Giai ƒëo·∫°n an to√†n: trong chu k·ª≥ d·ª± ƒëo√°n, kh√¥ng thu·ªôc c√°c giai ƒëo·∫°n tr√™n
    const diffFromCurrentStart = Math.floor((date - currentPeriodStart) / (1000 * 60 * 60 * 24));
    if (diffFromCurrentStart >= 0 && diffFromCurrentStart < cycleLength &&
        !(
            (diffFromCurrentStart >= 0 && diffFromCurrentStart < periodLength) ||
            (date >= fertileStart && date <= fertileEnd) ||
            formatDate(date) === formatDate(ovulationDate)
        )
    ) {
        return "safe-predict";
    }

    return "";
}

function renderCalendar(container, year, month) {
    container.innerHTML = "";
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();

    // Header: Th·ª©
    const dayNames = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
    dayNames.forEach((dn) => {
        const th = document.createElement('div');
        th.classList.add('day', 'readonly');
        th.textContent = dn;
        container.appendChild(th);
    });

    // T·∫°o √¥ tr·ªëng ƒë·∫ßu th√°ng
    const startWeekday = firstDay.getDay();
    for (let i = 0; i < startWeekday; i++) {
        const emptyDiv = document.createElement('div');
        emptyDiv.classList.add('day', 'readonly');
        container.appendChild(emptyDiv);
    }

    for (let d = 1; d <= daysInMonth; d++) {
        const date = new Date(year, month, d);
        const dayDiv = document.createElement('div');
        dayDiv.classList.add('day');
        dayDiv.textContent = d;

        if (formatDate(date) === getTodayStr()) {
            dayDiv.classList.add('today');
            // Hi·ªÉn th·ªã icon t√¢m tr·∫°ng n·∫øu c√≥
            const mood = localStorage.getItem(`mood-${getTodayStr()}`);
            if (mood) {
                let emoji = '';
                if (mood === 'R·∫•t h·∫°nh ph√∫c') emoji = 'üòÑ';
                else if (mood === 'H·∫°nh ph√∫c') emoji = 'üòä';
                else if (mood === 'B√¨nh th∆∞·ªùng') emoji = 'üòê';
                else if (mood === 'Kh√¥ng vui') emoji = 'üòï';
                else if (mood === 'Phi·ªÅn mu·ªôn') emoji = 'üò¢';
                if (emoji) {
                    dayDiv.innerHTML = d + '<div style="font-size:1.2em;">' + emoji + '</div>';
                }
            }
        }

        // Ph√¢n lo·∫°i ng√†y
        const dayType = getDayType(date);
        switch (dayType) {
            case "period": dayDiv.classList.add("period"); break;
            case "period-predict": dayDiv.classList.add("period-predict"); break;
            case "fertile-predict": dayDiv.classList.add("fertile-predict"); break;
            case "ovulation-predict": dayDiv.classList.add("ovulation-predict"); break;
            case "safe-predict": dayDiv.classList.add("safe-predict"); break;
        }

        // Cho ph√©p click ƒë·ªÉ ch·ªçn ng√†y h√†nh kinh
        dayDiv.style.cursor = 'pointer';
        dayDiv.addEventListener('click', function () {
            const iso = formatDate(date);
            let data = JSON.parse(localStorage.getItem("periodData") || "[]");
            if (data.includes(iso)) {
                data = data.filter(d => d !== iso);
            } else {
                data.push(iso);
            }
            localStorage.setItem("periodData", JSON.stringify(data));
            periodData = data;
            renderMainCalendar();
            updateCycleStats();
        });

        container.appendChild(dayDiv);
    }
}

function renderMainCalendar() {
    const y = mainDate.getFullYear();
    const m = mainDate.getMonth();
    mainMonthYear.textContent = `${y} - Th√°ng ${m + 1}`;
    renderCalendar(mainCalendar, y, m);
}

function getPeriodRanges() {
    if (periodData.length === 0) return [];
    let sorted = periodData.map(d => parseDate(d)).sort((a, b) => a - b);
    let periods = [];
    let current = [];
    for (let i = 0; i < sorted.length; i++) {
        if (i === 0 || (sorted[i] - sorted[i - 1]) / (1000 * 60 * 60 * 24) === 1) {
            current.push(sorted[i]);
        } else {
            if (current.length > 0) periods.push(current);
            current = [sorted[i]];
        }
    }
    if (current.length > 0) periods.push(current);
    return periods.map(p => ({ start: p[0], end: p[p.length - 1] }));
}

function applySettings() {
    const periodLength = document.getElementById('period-length').value;
    const cycleLength = document.getElementById('cycle-length').value;
    
    localStorage.setItem("customPeriodLength", periodLength);
    localStorage.setItem("customCycleLength", cycleLength);
    
    renderMainCalendar();
    updateCycleStats();
    updateReminders();
}

// === T√ÇM TR·∫†NG ===
function saveMood(mood) {
    localStorage.setItem(`mood-${getTodayStr()}`, mood);
    selectedMood.textContent = mood;
    moodIcons.forEach(icon => {
        icon.classList.remove("selected");
        if (icon.dataset.mood === mood) icon.classList.add("selected");
    });
    renderMainCalendar();
}

function loadMood() {
    const mood = localStorage.getItem(`mood-${getTodayStr()}`);
    if (mood) {
        selectedMood.textContent = mood;
        moodIcons.forEach(icon => {
            icon.classList.remove("selected");
            if (icon.dataset.mood === mood) icon.classList.add("selected");
        });
    } else {
        selectedMood.textContent = "Ch∆∞a ch·ªçn";
        moodIcons.forEach(ic => ic.classList.remove("selected"));
    }
}

// Event listener cho mood icons
moodIcons.forEach(icon => {
    icon.addEventListener('click', function() {
        const mood = this.dataset.mood;
        if (selectedMood.textContent === mood) {
            localStorage.removeItem(`mood-${getTodayStr()}`);
            selectedMood.textContent = "Ch∆∞a ch·ªçn";
            moodIcons.forEach(ic => ic.classList.remove("selected"));
            renderMainCalendar();
            updateReminders();
        } else {
            saveMood(mood);
            updateReminders();
        }
    });
});

// === TH·ªêNG K√ä CHU K·ª≤ ===
const cycleChartCtx = document.getElementById('cycleChart').getContext('2d');
let cycleChart;

function updateCycleStats() {
    if (periodData.length < 2) {
        cycleWarning.textContent = "D·ªØ li·ªáu chu k·ª≥ ch∆∞a ƒë·ªß ƒë·ªÉ th·ªëng k√™.";
        if (cycleChart) cycleChart.destroy();
        return;
    }

    cycleWarning.textContent = "";
    const sorted = periodData.map(d => parseDate(d)).sort((a, b) => a - b);
    const cycleLengths = [];
    for (let i = 1; i < sorted.length; i++) {
        cycleLengths.push(Math.round((sorted[i] - sorted[i - 1]) / (1000 * 60 * 60 * 24)));
    }

    const labels = sorted.slice(1).map(d => formatDate(d));
    if (cycleChart) cycleChart.destroy();
    cycleChart = new Chart(cycleChartCtx, {
        type: 'line',
        data: {
            labels,
            datasets: [{
                label: 'ƒê·ªô d√†i chu k·ª≥ (ng√†y)',
                data: cycleLengths,
                borderColor: '#10b981',
                backgroundColor: 'rgba(16,185,129,0.2)',
                fill: true,
                tension: 0.3,
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    suggestedMin: 20,
                    suggestedMax: 45,
                    stepSize: 1,
                    ticks: {
                        precision: 0
                    }
                }
            }
        }
    });
}

// === NH·∫ÆC NH·ªû C√Å NH√ÇN H√ìA ===
function updateReminders() {
    reminderMessages.innerHTML = "";
    const today = getTodayStr();
    const cycleLength = parseInt(localStorage.getItem("customCycleLength")) || getAverageCycle();
    const periodLength = parseInt(localStorage.getItem("customPeriodLength")) || 5;

    if (!periodData.length) {
        reminderMessages.textContent = "B·∫°n ch∆∞a nh·∫≠p d·ªØ li·ªáu k·ª≥ kinh n√†o, vui l√≤ng c·∫≠p nh·∫≠t ƒë·ªÉ nh·∫≠n nh·∫Øc nh·ªü ch√≠nh x√°c.";
        return;
    }
    
    const sortedPeriods = periodData.map(d => parseDate(d)).sort((a, b) => a - b);
    let lastPeriod = null;
    for (let i = sortedPeriods.length - 1; i >= 0; i--) {
        if (sortedPeriods[i] <= new Date()) {
            lastPeriod = sortedPeriods[i];
            break;
        }
    }
    if (!lastPeriod) {
        reminderMessages.textContent = "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu k·ª≥ kinh ph√π h·ª£p ƒë·ªÉ nh·∫Øc nh·ªü.";
        return;
    }

    const todayDate = new Date();
    const daysSinceLastPeriod = Math.floor((todayDate - lastPeriod) / (1000 * 60 * 60 * 24));

    let messages = [];

    // Nh·∫Øc ng√†y h√†nh kinh
    if (daysSinceLastPeriod >= 0 && daysSinceLastPeriod < periodLength) {
        messages.push("B·∫°n ƒëang trong k·ª≥ h√†nh kinh. H√£y chƒÉm s√≥c s·ª©c kh·ªèe v√† ngh·ªâ ng∆°i h·ª£p l√Ω.");
    }
    // Nh·∫Øc ng√†y d·ªÖ th·ª• thai
    if (daysSinceLastPeriod >= 12 && daysSinceLastPeriod <= 16) {
        messages.push("B·∫°n ƒëang trong giai ƒëo·∫°n d·ªÖ th·ª• thai. H√£y l∆∞u √Ω n·∫øu b·∫°n c√≥ k·∫ø ho·∫°ch ho·∫∑c tr√°nh thai.");
    }

    // Th√¥ng ƒëi·ªáp theo t√¢m tr·∫°ng
    const moodMessages = {
        "R·∫•t h·∫°nh ph√∫c": "B·∫°n ƒëang r·∫•t vui v·∫ª! H√£y lan t·ªèa nƒÉng l∆∞·ª£ng t√≠ch c·ª±c n√†y ƒë·∫øn m·ªçi ng∆∞·ªùi xung quanh nh√©.",
        "H·∫°nh ph√∫c": "M·ªôt ng√†y tuy·ªát v·ªùi! H√£y t·∫≠n h∆∞·ªüng v√† l√†m ƒëi·ªÅu b·∫°n y√™u th√≠ch.",
        "B√¨nh th∆∞·ªùng": "N·∫øu c√≥ ƒëi·ªÅu g√¨ khi·∫øn b·∫°n ch∆∞a vui, h√£y th·ª≠ th∆∞ gi√£n ho·∫∑c chia s·∫ª v·ªõi b·∫°n b√®.",
        "Kh√¥ng vui": "B·∫°n ƒëang kh√¥ng vui. H√£y d√†nh th·ªùi gian cho b·∫£n th√¢n, ngh·ªâ ng∆°i ho·∫∑c t√¢m s·ª± v·ªõi ng∆∞·ªùi th√¢n.",
        "Phi·ªÅn mu·ªôn": "B·∫°n ƒëang c·∫£m th·∫•y phi·ªÅn mu·ªôn. ƒê·ª´ng ng·∫ßn ng·∫°i t√¨m ki·∫øm s·ª± h·ªó tr·ª£ t·ª´ ng∆∞·ªùi th√¢n ho·∫∑c chuy√™n gia."
    };
    const mood = localStorage.getItem(`mood-${today}`);
    if (mood && moodMessages[mood]) {
        messages.push(moodMessages[mood]);
    }

    if (messages.length === 0) {
        messages.push("Ch√∫c b·∫°n m·ªôt ng√†y kh·ªèe m·∫°nh v√† vui v·∫ª!");
    }

    reminderMessages.innerHTML = messages.map(m => `<p>‚Ä¢ ${m}</p>`).join("");
}

// === T·ª∞ ƒê·ªòNG REFRESH L·ªäCH KHI SANG NG√ÄY M·ªöI ===
let lastTodayStr = getTodayStr();
setInterval(() => {
    const nowTodayStr = getTodayStr();
    if (nowTodayStr !== lastTodayStr) {
        lastTodayStr = nowTodayStr;
        renderMainCalendar();
    }
}, 60 * 1000);

// === KH·ªûI ƒê·ªòNG ===
document.addEventListener('DOMContentLoaded', () => {
    renderMainCalendar();

    // C√†i ƒë·∫∑t n√∫t chuy·ªÉn th√°ng
    document.getElementById('prevMainMonth').onclick = () => {
        mainDate.setMonth(mainDate.getMonth() - 1);
        renderMainCalendar();
    };
    document.getElementById('nextMainMonth').onclick = () => {
        mainDate.setMonth(mainDate.getMonth() + 1);
        renderMainCalendar();
    };

    // C√†i ƒë·∫∑t n√∫t l∆∞u c√†i ƒë·∫∑t chu k·ª≥
    document.getElementById('apply-settings').onclick = applySettings;

    // Load t√¢m tr·∫°ng h√¥m nay
    loadMood();

    // C·∫≠p nh·∫≠t th·ªëng k√™
    updateCycleStats();

    // C·∫≠p nh·∫≠t nh·∫Øc nh·ªü
    updateReminders();
});
